/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AC_VIEWVIEWBASE_HPP
#define AC_VIEWVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/ac_view_screen/ac_viewPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class ac_viewViewBase : public touchgfx::View<ac_viewPresenter>
{
public:
    ac_viewViewBase();
    virtual ~ac_viewViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void AC_sethigh()
    {
        // Override and implement this function in ac_view
    }

    virtual void AC_setmed()
    {
        // Override and implement this function in ac_view
    }

    virtual void AC_setlow()
    {
        // Override and implement this function in ac_view
    }

    virtual void AC_setonoff()
    {
        // Override and implement this function in ac_view
    }

    virtual void AC_setdown()
    {
        // Override and implement this function in ac_view
    }

    virtual void AC_setup()
    {
        // Override and implement this function in ac_view
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage tiledImage1;
    touchgfx::ButtonWithLabel MED;
    touchgfx::ButtonWithLabel LOW;
    touchgfx::ButtonWithLabel HIGH;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::ButtonWithLabel back;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::ButtonWithLabel UP;
    touchgfx::ButtonWithLabel DOWN;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ac_viewViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // AC_VIEWVIEWBASE_HPP
